Description: >-
  An AWS Serverless Application that uses the ASP.NET Core framework running in
  Amazon Lambda.
Parameters:
  ShouldCreateBucket:
    Type: String
    Description: >-
      If true then the S3 bucket that will be proxied will be created with the
      CloudFormation stack.
    AllowedValues:
      - 'true'
      - 'false'
  BucketName:
    MinLength: '0'
    Type: String
    Description: >-
      Name of S3 bucket that will be proxied. If left blank a name will be
      generated.
AWSTemplateFormatVersion: 2010-09-09
Outputs:
  S3ProxyBucket:
    Value: !If 
      - CreateS3Bucket
      - !Ref Bucket
      - !Ref BucketName
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value: !Sub >-
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
Conditions:
  CreateS3Bucket: !Equals 
    - !Ref ShouldCreateBucket
    - 'true'
  BucketNameGenerated: !Equals 
    - !Ref BucketName
    - ''
Resources:
  AspNetCoreFunctionProxyResourcePermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref AspNetCoreFunction
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*/*
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  ServerlessRestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServerlessRestApiDeploymentcfb7a37fc3
      RestApiId: !Ref ServerlessRestApi
      StageName: Prod
  AspNetCoreFunctionRootResourcePermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref AspNetCoreFunction
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*/
        - __Stage__: '*'
          __ApiId__: !Ref ServerlessRestApi
  ServerlessRestApiDeploymentcfb7a37fc3:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ServerlessRestApi
      Description: 'RestApi deployment id: cfb7a37fc32efb58b061e718295e786a9a18556f'
      StageName: Stage
  Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If 
        - BucketNameGenerated
        - !Ref 'AWS::NoValue'
        - !Ref BucketName
    Condition: CreateS3Bucket
  AspNetCoreFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: tapmiapp-serverless-test
        S3Key: >-
          AWSServerless1/AspNetCoreFunction-CodeUri-637349103979401828-637349104061315992.zip
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 256
      Environment:
        Variables:
          AppS3Bucket: !If 
            - CreateS3Bucket
            - !Ref Bucket
            - !Ref BucketName
      Handler: 'AWSServerless1::AWSServerless1.LambdaEntryPoint::FunctionHandlerAsync'
      Role: !GetAtt 
        - AspNetCoreFunctionRole
        - Arn
      Timeout: 30
      Runtime: dotnetcore3.1
  AspNetCoreFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
  ServerlessRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          '/{proxy+}':
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations
              responses: {}
          /:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations
              responses: {}
        swagger: '2.0'
